#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# shellcheck source=/dev/null
# shellcheck shell=bash disable=SC2034,SC2154

export TERM=${TERM:-xterm}
export TERM=${TERM:-xterm-256color}

# Defining color variables (bold only)
export black="\033[1;30m"
export red="\033[1;31m"
export green="\033[1;32m"
export yellow="\033[1;33m"
export blue="\033[1;34m"
export magenta="\033[1;35m"
export cyan="\033[1;36m"
export white="\033[1;37m"
export bold="\033[1m"
export reset="\033[0m"
export normal_black="\033[0;30m"
export normal_red="\033[0;31m"
export normal_green="\033[0;32m"
export normal_yellow="\033[0;33m"
export normal_blue="\033[0;34m"
export normal_magenta="\033[0;35m"
export normal_cyan="\033[0;36m"
export normal_white="\033[0;37m"
export bright_black="\033[1;90m"
export bright_red="\033[1;91m"
export bright_green="\033[1;92m"
export bright_yellow="\033[1;93m"
export bright_blue="\033[1;94m"
export bright_magenta="\033[1;95m"
export bright_cyan="\033[1;96m"
export bright_white="\033[1;97m"
#
export COL_NC='\e[0m' # No Color
export COL_LIGHT_GREEN='\e[1;32m'
export COL_LIGHT_RED='\e[1;31m'
export TICK="${white}[${COL_LIGHT_GREEN}✓${COL_NC}${white}]"
export CROSS="${white}[${COL_LIGHT_RED}✗${COL_NC}${white}]"
export INFO="[i]"
export DONE="${COL_LIGHT_GREEN} done!${COL_NC}"
export OVER="\\r\\033[K"
export DOTPREFIX="  ${black}::${reset} "
#
declare IS_UPGRADE=false
declare IS_DBLOCK=false
declare DM='lightdm'
declare WM='chili-skel'
declare pkgname="${WM}"
declare servicesToEnable=()
declare servicesToDisable=()

msg() {
	local msg="$1"
	echo -e "${blue}==>${black}[${pkgname}] ${bright_cyan}${msg}${reset}" >&2
}

log_ok() { echo -e "  ${TICK} ${*}${reset}"; }
log_err() { echo -e "  ${CROSS} ${*}${reset}"; }

die() {
	local msg=$1
	shift
	#printf "  %b %s\\n" "${CROSS}" "${red}${msg}${reset}"
	echo -e "  ${CROSS} ${red}${msg}${reset}"
	sh_restoring_lock
	exit 1
}

sh_load_optdepends() {
	local info_file="/usr/share/${pkgname}/optdepends"

	if [[ -f "$info_file" && -r "$info_file" ]]; then
		mapfile -t OPTDEPENDS <"$info_file"
	else
		msg "${red}FATAL: Something went wrong! File '$info_file' not found or without read permission."
		msg "${red}FATAL: Something went wrong! File '$info_file' not found or without read permission."
	fi
}

sh_restoring_lock() {
	if $IS_DBLOCK; then
		msg "Restauring pacman lock: /var/lib/pacman/db.lck"
		touch /var/lib/pacman/db.lck &>/dev/null
	fi
}

sh_check_package_exist() {
	local pkg
	local not_installed=()
	local not_found=()

	# Verifica pacotes instalados localmente de uma vez
	for pkg in "${OPTDEPENDS[@]}"; do
		if ! pacman -Qq "$pkg" &>/dev/null; then
			not_installed+=("$pkg")
		fi
	done

	# Verifica pacotes ausentes no repositório de uma vez
	if ((${#not_installed[@]})); then
		for pkg in "${not_installed[@]}"; do
			if ! pacman -Ssq "^$pkg$" &>/dev/null; then
				not_found+=("$pkg")
			fi
		done
	fi

	# Se houver pacotes não encontrados, exibe erro
	if ((${#not_found[@]})); then
		die "Fatal: os seguintes pacotes não existem no repositório: ${not_found[*]}"
	fi

	for pkg in "${OPTDEPENDS[@]}"; do
		log_ok "Check: ${cyan}$pkg"
	done
}

sh_start_dbus_in_chroot() {
	# Verifica se o D-Bus já está em execução
	if ! pgrep -x "dbus-daemon" >/dev/null; then
		# Cria o diretório para o socket do D-Bus
		mkdir -p /run/dbus
		chmod 755 /run/dbus

		# Inicia o D-Bus
		dbus-daemon --system --fork

		# Configura as variáveis de ambiente
		export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/dbus/system_bus_socket
		export DBUS_SYSTEM_BUS_ADDRESS=unix:path=/run/dbus/system_bus_socket
	fi
}

sh_copy_user_etc_usr_opt_files() {
	msg "Configuring the package after installation/upgrade..."

	# Copiar a estrutura para os diretórios de destino
	local dirs=("usr" "etc" "opt")

	for dir in "${dirs[@]}"; do
		if [ -d "/usr/share/${pkgname}/${dir}" ]; then
			# Copiar os arquivos e subdiretórios de /usr/share/${pkgname}/${dir} para o sistema
			cp -a "/usr/share/${pkgname}/${dir}" "/"
		fi
	done
	# Sobrescreve o arquivo plymouthd.conf com a versão do pacote
	#cp -af /usr/lib/manjaro-tools/util-live.sh /usr/lib/manjaro-tools/util-live.sh.pacnew
	#cp -af /usr/lib/manjaro-tools/util-live.sh.community /usr/lib/manjaro-tools/util-live.sh
	#cp -af /usr/share/${pkgname}/usr/lib/manjaro-tools/util-live.sh.community /usr/lib/manjaro-tools/util-live.sh
	#chmod +x /usr/lib/manjaro-tools/util-live.sh
}

post_install() {
	msg "Initializing system installation and configuration..."
	sh_copy_user_etc_usr_opt_files
  msg "${green}Upgrade complete."
}

post_upgrade() {
	IS_UPGRADE=true
	post_install
}
